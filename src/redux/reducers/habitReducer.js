// Import the createSlice function to create a slice of the Redux state
import { createSlice } from "@reduxjs/toolkit";

// Initialize a unique id for each new habit
let id = 1;

// Define the initial state of the habit slice
const initialState = {
    habits: []
}

// Create a slice for habit using createSlice
export const habitSlice = createSlice({
    name: "habits", // Name of the slice
    initialState: initialState, // Initial state of the slice
    reducers: {
        // Reducer to add a new habit
        addHabit: (state, action) => {

            // Get the current date
            const today = new Date();
            // Calculate the date of the Sunday at the beginning of the current week.
            let day = today.getDate() - today.getDay();
            // Get the current month 
            const month = today.getMonth();
            // Get the current year
            const year = today.getFullYear();

            // Push a new habit object to the habits array in the state
            state.habits.push({
                id: id++,
                name: action.payload,
                weekLog: [  // A week log that tracks whether the habit was done for each day of the week
                    {
                        id: 0,
                        day: "Sunday",
                        dd: day,
                        mm: month,
                        yyyy: year,
                        isDone: "",
                    },
                    {
                        id: 1,
                        day: "Monday",
                        dd: day + 1,
                        mm: month,
                        yyyy: year,
                        isDone: "",
                    },
                    {
                        id: 2,
                        day: "Tuesday",
                        dd: day + 2,
                        mm: month,
                        yyyy: year,
                        isDone: "",
                    },
                    {
                        id: 3,
                        day: "Wednesday",
                        dd: day + 3,
                        mm: month,
                        yyyy: year,
                        isDone: "",
                    },
                    {
                        id: 4,
                        day: "Thursday",
                        dd: day + 4,
                        mm: month,
                        yyyy: year,
                        isDone: "",
                    },
                    {
                        id: 5,
                        day: "Friday",
                        dd: day + 5,
                        mm: month,
                        yyyy: year,
                        isDone: "",
                    },
                    {
                        id: 6,
                        day: "Saturday",
                        dd: day + 6,
                        mm: month,
                        yyyy: year,
                        isDone: "",
                    },
                ]
            })
        },

        // Reducer to mark a habit as "done" for a specific day
        habitDone: (state, action) => {

            state.habits.map((habit, i) => {
                if (habit.id === Number(localStorage.getItem("id"))) {
                    habit.weekLog[action.payload].isDone = true;
                }
                return habit;
            })
        },

        // Reducer to mark a habit as "undone" for a specific day
        habitUnDone: (state, action) => {

            state.habits.map((habit, i) => {
                if (habit.id === Number(localStorage.getItem("id"))) {
                    habit.weekLog[action.payload].isDone = false;
                }
                return habit;
            })
        },

        // Reducer to mark a habit day as "none" (no status) for a specific day
        habitNone: (state, action) => {
            state.habits.map((habit, i) => {
                if (habit.id === Number(localStorage.getItem("id"))) {
                    habit.weekLog[action.payload].isDone = "";
                }
                return habit;
            })
        },
    }
});

//To access the slice reducer function generated by createSlice
export const habitReducer = habitSlice.reducer;

// Action creators are generated for each case reducer function
export const { addHabit, habitDone, habitUnDone, habitNone } = habitSlice.actions;

// Selector function to access the list of habits from the Redux state
export const habitSelector = (state) => state.habitReducer.habits;